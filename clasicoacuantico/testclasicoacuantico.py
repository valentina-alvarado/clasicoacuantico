#valentina alvarado

import unittest
import clasicoacuantico as lva

class TestStringMethods(unittest.TestCase):

    def test_upper(self):
        matr = [[(1,0),(0,0),(0,0),(0,0),(0,0),(0,0)],[(1,0),(0,0),(0,0),(0,0),(0,0),(0,0)],[(0,0),(1,0),(0,0),(0,0),(0,0),(0,0)],[(0,0),(1,0),(0,0),(1,0),(0,0),(0,0)],[(0,0),(0,0),(1,0),(0,0),(0,0),(0,0)],[(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)]]
        vectori = [(0,0),(0,0),(1,0),(0,0),(0,0),(1,0)]
        self.assertEqual(lva.experimentobooleano(matr,vectori,1),[(0, 0), (0, 0), (0, 0), (0, 0), (1, 0), (0, 0)])

        matr2 = [[(90, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(1, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
                [(0, 0), (1, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(0, 0), (1, 0), (0, 0), (1, 0), (0, 0), (0, 0)],
                [(0, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0)], [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]]
        vectori = [(0, 0), (0, 0), (1, 0), (0, 0), (0, 0), (1, 0)]
        self.assertEqual(lva.experimentobooleano(matr2, vectori, 1),TypeError)

    def test_upper(self):
        matr = [[[0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [0.2, 0], [0, 0], [0, 0], [0, 0]],[[0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0.2, 0], [0, 0], [0, 0]],[[0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],[[0, 0], [0.5, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0]],[[0, 0], [0.3333333333333333, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0]],[[0, 0], [0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],[[0, 0], [0, 0], [0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0]],[[0, 0], [0, 0], [0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0.5, 0]]]
        vectori = [[1, 0], [1, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [1, 0]]
        self.assertEqual(lva.sistemaprobabilistico(matr,vectori,1),[(0.3333333333333333, 0.0), (0.5, 0.0), (0.3333333333333333, 0.0), (1.5, 0.0), (0.3333333333333333, 0.0), (0.5, 0.0), (0.0, 0.0), (0.5, 0.0)])

    def test_upper(self):
        matr = [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],[[0.8056666, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],[[0.805666, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],[[0, 0], [0.608235, -0.608523], [0, 0], [0, 0], [0, 0], [0.608235, 0], [1, -0.608235], [0, 0]],[[0, 0], [-0.608235, 0.608523], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0]],[[0, 0], [0, -0.608235], [0.2, 0.608235], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0.608235, 0], [0, 0]],[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [-0.608235, 0]]]
        self.assertEqual(lva.sistemaprobabicuantico(matr,1),[[[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]], [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]], [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]], [[0.4760999999999999], [0.1369], [0.1521], [0.0], [0.0], [0.0], [0.5041], [0.0]], [[0.4760999999999999], [0.7395999999999999], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0]], [[0.0256], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]], [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.1369], [0.0]], [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.1369]]])

        self.assertEqual(lva.sistemaprobabicuantico(matr, l),ArithmeticError)

    def test_upper(self):
        matr = [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],[[0.8056666, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],[[0.805666, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],[[0, 0], [0.608235, -0.608523], [0, 0], [0, 0], [0, 0], [0.608235, 0], [1, -0.608235], [0, 0]],[[0, 0], [-0.608235, 0.608523], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0]],[[0, 0], [0, -0.608235], [0.2, 0.608235], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0.608235, 0], [0, 0]],[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [-0.608235, 0]]]
        self.assertEqual(lva.multiplesrendijascu(matr[:],2),[[[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]], [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]], [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]], [[0.4760999999999999], [0.1369], [0.1521], [0.0], [0.0], [0.0], [0.5041], [0.0]], [[0.4760999999999999], [0.7395999999999999], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0]], [[0.0256], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]], [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.1369], [0.0]], [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.1369]]])


    def test_upper(self):
        matr = [[[0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [0.2, 0], [0, 0], [0, 0], [0, 0]],[[0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0.2, 0], [0, 0], [0, 0]],[[0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],[[0, 0], [0.5, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0]],[[0, 0], [0.3333333333333333, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0]],[[0, 0], [0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],[[0, 0], [0, 0], [0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0]],[[0, 0], [0, 0], [0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0.5, 0]]]
        vectori = [[1, 0], [1, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [1, 0]]
        self.assertEqual(lva.multiplesrendijascla(matr[:],vectori[:],3),[(0.15925925925925927, 0.0), (0.1388888888888889, 0.0), (0.05925925925925925, 0.0), (1.8833333333333333, 0.0), (0.5888888888888889, 0.0), (0.13333333333333333, 0.0), (0.14814814814814814, 0.0), (0.26388888888888884, 0.0)])

    def graficaprobabilidades(self):
        graficaprobabilidades([0.15925925925925927,0,0.05925925925925925,1.8833333333333333,0.5888888888888889,0.13333333333333333,0.14814814814814814,0.26388888888888884])

if __name__ == '__main__':
    unittest.main()